<?php

namespace KochTest\Config\Adapter;

use Koch\Config\Adapter\Native;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-12 at 22:36:31.
 */
class NativeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Native
     */
    protected $object;

    private $file = 'nativeConfig.php';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    public function setUp()
    {
        $this->object = new Native;

        if (!class_exists('vfsStreamWrapper')) {
            $this->markTestSkipped('vfsStream is not available - skipping');
        }

        // setup vfsStream
        vfsStreamWrapper::register();

        // create root folder
        $root = new vfsStreamDirectory('root');
        vfsStream::setRoot($root);

        // create virtual config file with content
        $file = vfsStream::newFile($this->file)
            ->withContent($this->getConfigContent())
            ->chmod(777)
            ->at($root);

        // lets test vfsStream
        $url = vfsStream::url('root/'.$this->file);
        $this->assertFileExists($url);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    public function tearDown()
    {
        unset($this->object);
    }

    /**
     * @covers Koch\Config\Adapter\Native::readConfig
     */
    public function testReadConfig()
    {
        $file = vfsStream::url('root/'.$this->file);
        $this->object->readConfig($file);
    }

    /**
     * @covers Koch\Config\Adapter\Native::writeConfig
     */
    public function testWriteConfig()
    {
        $file = vfsStream::url('root/'.$this->file);
        $this->object->writeConfig($file, $this->getConfigContent());
    }

    public function getConfigContent()
    {
        return array(
            'test' => 'value'
        );
    }
}
