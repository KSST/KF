<?php

/**
 * Koch Framework
 *
 * SPDX-FileCopyrightText: 2005-2024 Jens A. Koch
 * SPDX-License-Identifier: MIT
 *
 * For the full copyright and license information, please view
 * the LICENSE file that was distributed with this source code.
 */

namespace Koch\Config\Exception;

/**
 * The JSON Exception class represents any failures of decoding json strings.
 */
class JsonException extends \Exception
{
    public $error      = null;
    public $error_code = JSON_ERROR_NONE;

    /**
     * Constructor.
     *
     * @param $filename
     * @param int $error_code
     */
    public function __construct($filename, $error_code = null)
    {
        $this->error_code = $error_code;
        $this->error      = sprintf(
            _('JSON Error in file "%s". %s'),
            $filename,
            $this->getJsonErrorMessage($error_code)
        );

        parent::__construct();
    }

    /**
     * Returns the proper json error message for the given JSON Error Type.
     * $json_error_type is generated by json_decode() and fetched via json_last_error(),
     * then passed to this method.
     *
     * @param string $json_error_type The json error type to get the error message for.
     *
     * @return string The json error message for the given error type.
     */
    public static function getJsonErrorMessage($json_error_type = null)
    {
        if ($json_error_type === null) {
            return _('The json content from file was null.');
        }

        $json_error_messages = [
            JSON_ERROR_DEPTH          => _('The maximum stack depth has been exceeded.'),
            JSON_ERROR_STATE_MISMATCH => _('File contains invalid or malformed JSON.'),
            JSON_ERROR_CTRL_CHAR      => _('Unexpected control character found, possibly invalid encoding.'),
            JSON_ERROR_SYNTAX         => _('Syntax Error, malformed JSON.'),
            JSON_ERROR_UTF8           => _('Malformed UTF-8 characters, possibly invalid encoding.'),
        ];

        return $json_error_messages[$json_error_type];
    }

    public function __toString()
    {
        return $this->error;
    }
}
